name: Tests

on:
  pull_request:
  push:
    branches: [hackage, develop]
  schedule:
    - cron:  '0 13 15 * *'

jobs:

  test:
    name: ${{ matrix.resolver }} on ${{ matrix.os }} (${{ matrix.ghc }}/${{ matrix.cabal }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        ghc: ['8.10.7']
        cabal: ['3.4.0.0']
        os: [ubuntu-latest]
        resolver: [lts-3.22 , lts-6.35, lts-7.24, lts-9.21, lts-10.3, lts-11.22, lts-12.14, lts-12.26, lts-13.11, lts-13.19, lts-14.27, lts-15.3 , lts-16.11, lts-16.31, lts-17, lts-18.6, lts-18.8, lts-18, lts]
#        include:
#          - branch: develop
#            resolver: 'nightly'
#            cabal: '3.2.0.0'
#            ghc: '8.10.5'
#            os: ubuntu-latest

    steps:

      - name: Check out repo
        uses: actions/checkout@v2

      - name: Setup Haskell
        uses: haskell/actions/setup@v1
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}
          enable-stack: true
#          stack-version: ${{ matrix.stack }}

      - name: Cache ~/.stack
        uses: actions/cache@v2.1.6
        if: ${{ matrix.resolver != 'lts' && matrix.resolver != 'lts-17' && matrix.resolver != 'lts-18' && matrix.resolver != 'nightly'}}
        with:
          path: ~/.stack
          key: ${{ matrix.ghc }}-${{ matrix.cabal }}-${{ matrix.resolver }}

      - name: Versions
        run: |
          ghc --version
          echo
          stack --version
          cabal --version

      - name: Initalize Stack for LTS
        run: |
          stack update
          stack init --resolver ${{ matrix.resolver }} --force

      - name: Build package dependencies
        run: |
          stack --resolver ${{ matrix.resolver }} build --no-run-tests --no-run-benchmarks --only-dependencies

      - name: Build package
        run: |
          stack --resolver ${{ matrix.resolver }} build --no-run-tests --no-run-benchmarks

      - name: Build testing dependencies
        run: |
          stack --resolver ${{ matrix.resolver }} build --no-run-tests --no-run-benchmarks --test --bench

      - name: Run tests
        run: |
          stack --resolver ${{ matrix.resolver }} build --test --no-run-benchmarks

      - name: Sample CLI use
        run: |
          stack --resolver ${{ matrix.resolver }} exec -- enigma encode "c-β-V-VI-VIII CDTJ AE.BF.CM.DQ.HU.JN.LX.PR.SZ.VW 05.16.05.12" "FOLGENDES IST SOFORT BEKANNTZUGEBEN"
          stack --resolver ${{ matrix.resolver }} exec -- enigma run "c-β-V-VI-VIII CDTJ AE.BF.CM.DQ.HU.JN.LX.PR.SZ.VW 05.16.05.12" -m "FOLGENDES IST SOFORT BEKANNTZUGEBEN" -f single -e -t
          stack --resolver ${{ matrix.resolver }} exec -- enigma --version

      - name: Package list
        run: |
          stack --resolver ${{ matrix.resolver }} exec ghc-pkg list || true

      - name: Versions
        run: |
          ghc --version
          stack --resolver ${{ matrix.resolver }} --verbosity warn exec -- ghc --version
          stack --resolver ${{ matrix.resolver }} --verbosity warn exec -- ghc --version --system-ghc
          echo
          stack --resolver ${{ matrix.resolver }} --verbosity warn exec -- stack --version
          stack --resolver ${{ matrix.resolver }} --verbosity warn exec -- cabal --version


# TBD
# * Confirm correct flags for sequenced build  (--system-ghc --test --bench --haddock -bench)
# * Do cabal builds as well?
# * Exclude nightly from haddock branch (only) ~ general handling of haddock's version of CI (include: branch: develop?)
# * Doctests / doc generation?
# * Add nightly <<<
# * Notifications (Gitter, etc.)
# * Cache before or after haskell/actions/setup ?
# * Other OSes
# * Break build and test into seperate jobs? <<<

